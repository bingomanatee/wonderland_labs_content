[BEM](https://en.bem.info/method/) is a set of principles in CSS design. On the face of it it is a naming convention for CSS but in practice it is a deeper set of principles about how and when you use names and what styles and css methodology you do and do not use. 

## The Why of Fry

Before describing the what a note on the why: 

The premise here is that CSS rules that overlap obscure and frustrate developers on large teams and projects (and large teams with large projects). The chance for style definitions intended for one context spilling into another, and for frustrated developers to `!important;` -stamp their work just to force their desired outcomes. 

consider this set of tags:

```` html

<html>
  <section class="topnav">
     <div id="welcome">
       <h1>Welcome to <a href="/" class="header-link">Dinosaurs.com</a></h1>
     </div>
  ...
   </section>
</html>

````

How many ways can css affect the link? 

```` css
html h1 {color: red}
h1.link {color.green}
a {color: blue}
#welcome {color: black}
section a {color: orange}
h1 {color: yellow}
````

This is a significant problem with CSS. All of these technically valid patterns of style designation logjam and when a problem is detected, backing out of it in a large site with many existing markup tags is a nightmare. [This article](http://www.vanseodesign.com/css/css-specificity-inheritance-cascaade/) describes how awesomely curious precedence is in CSS. 

If you're curious click <a class="btn" target="_blank" href="https://jsfiddle.net/bingomanatee/je7t25rd/embedded/result/">Here</a>

The beauty -- and danger -- of CSS is that it cascades. 

## Local Ownership

BEM attempts to fix that by doing CSS without cascading effects by funneling all CSS into element level tags in which 100% of the style for its target is contained in that (or those) class(es). I.e., 

* No element level tags, whether global (`h1 {color:orange}`) or modifying (`h1{color: blue}`).
* No multi-element rules (`h1 a{color: blue}`)
* No id rules (which regardless, you should be observing anyway) (`#head {color: black)`)
* No positional or content related tags (`.field[type="input"] { color: red }`)

## The REM of BEM

In place of that multitude, BEM has three simple classes of CSS tags, 

1. **Block** tags, for overarching containers (`.article { font-size: 1.5rem }`)
2. **Element** tags, applied inside said container (`.article__paragraph { margin-bottom: 1rem }`)
3. **Modifier** tags, applied following element tags in special circumstances (`.article__paragraph--last { margin-bottom: 0 }`)

From this we get the acronym **BEM**. 

a few more notes:

* Blocks can be inside other blocks
* Modifier tags are only used as siblings of their base class

## Sparkle Magic

This does a great job of reducing the WTF factor of css. Once you get comfortable with long names its a very direct way of styling tags. 

Then you get into side effects; mostly having to do with any legacy/third party css that does restyle elements or IDs or is in any other way not BEMmed. 
 One typical example of this is form tags; its pretty common to restyle form tags based on the element name - such as having all `input[type=text]` elements to have a given visual style. At the least this happens because of resets. 

Also once you start using BEM you will find that you are writing a lot more CSS classes as EVERYTHING has to be manually styled, not just containers. In fact I'd say BEM is nigh on unmaintainable without a dynamic mixin based system like SASS or LESS because of this. Because BEM is anti-cascading mandate, EVERY ELEMENT that you use BEM with must have a class. Many, more than one class. 

That said, BEM does deliver on its promise of drastically neutralizing side effects. Its being used at [TheRealReal.com](http://www.therealreal.com) for our (pending) responsive pages and other ongoing work.