This project was originally about getting movie data times and mashing it up with IMDB. We need another source out there for that data. 

The good news is [tmsapi.com](http://developer.tmsapi.com/io-docs) has this data. The bad news is it rate limits the data to 50 calls a day.

For this experiment we will respond by 

1. limiting the search zones to six metropolitan areas: (Bay Area, New York City, Los Angeles, Portland, Oregon, Seattle, Washington and Austin, TX). 
2. Getting 30 days of data and refreshing caches every 7 days

As before, we get an API key from the provider and store it in `passport_config.json`:

``` json
{
    "eventful_auth_key": "xxx",
    "tmsapi_auth_key": "yyy"
}
```

Since the API is specialized for movies, we don't need to worry about categories. Also the data is better normalized than the eventful data, so less work will be had there. I originally cached the data in files, but as Heroku doesn't allow local files to be written, I plugged in an install of redis and cached the movie data there:

#### tmsapi_model.js

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var request = require('request');
var crypto = require('crypto');
var _DEBUG = false;
var moment = require('moment');

var redis;
if (process.env.REDISTOGO_URL) {
    console.log('redis url: %s', process.env.REDISTOGO_URL);
    var rtg = require("url").parse(process.env.REDISTOGO_URL);
    redis = require("redis").createClient(rtg.port, rtg.hostname);

    redis.auth(rtg.auth.split(":")[1]);
} else {
    redis = require("redis").createClient();
}

/* ------------ CLOSURE --------------- */

var API = 'http://data.tmsapi.com/v1/movies/showings';
/*+
 'startDate=2013-10-12' +
 '&numDays=30&zip=94103' +
 '&radius=100' +
 '&units=mi' +
 '&api_key=dtcd4eyz79x78yk84yjp45en';*/

var _cache_files = null;
var DATE_FORMAT = 'YYYY-MM-DD';

function _now() {
    return new moment().format(DATE_FORMAT);
}

function _then(date) {
    if (_.isString(date) || _.isDate(date)) {
        return new moment(date, DATE_FORMAT);
    } else {
        // assume is moment
        return date;
    }
}

function _age(date_string) {
    var then = _then(date_string);

    return new moment().diff(then, 'days');
}

/* -------------- EXPORT --------------- */

module.exports = function (apiary, cb) {

    /**
     * saves the data INSTANTLY to the file system.
     *
     * @param zip {number}
     * @param cb {function}
     * @private
     */

    function _poll_api(zip, cb) {
        console.log('POLLING API......... %s', zip);
        request.get(_params(zip), function (err, req, body) {
            if (err) {
                cb(err);
            } else {
                try {
                    var data = JSON.parse(body);
                    var str_data = JSON.stringify(_current_data(data));
                    console.log('saving %s data ...', zip, str_data.substr(0, 100));
                    redis.set(zip + '', str_data, function (result) {
                        console.log('result: %s', result.substr(0, 100));
                        cb(null, data);
                    });
                } catch (err) {
                    cb(err);
                }
            }
        });
    }

    function _params(zip) {
        return {
            url: API,
            qs: {
                startDate: _now(),
                api_key: apiary.get_config('tmsapi_auth_key'),
                radius: 100,
                units: 'mi',
                numDays: 30,
                zip: zip
            }
        };
    }

    function _get_movies(zip, cb) {
        zip = parseInt(zip);
        redis.get(zip + '', function (err, value) {
            if (value) {
                console.log('getting zip %s: %s', zip, value.substr(0, 50));
                cb(null, JSON.parse(value).data);
            } else if (err) {
                console.log('error: %s', err);
                cb(err);
            } else {
                model.poll_api(zip, cb);
            }
        })
    }

    function _current_data(data) {
        return {
            startDate: _now(),
            data: data
        };
    }

    var model = {
        name: 'tmsapi',
        search: _get_movies,
        age: _age,
        then: _then,
        poll_api: _poll_api,
        get_movies: _get_movies,
        current_data: _current_data
    };

    cb(null, model);
}

```

this model caches string versions of the JSON provided by tmsapi, with the addition of a timestamp, and re-polls any files over 7 days old. The poll requests movie data out to 30 days in advance, and for 100 miles around the city center. 

## Formatting the view for the new API data

The new API data lists movie data in a simple table:

``` html
<h1>Find Movies:</h1>

<p>
    <button class="btn" onClick="document.location='/movies/sanfrancisco'">San Francisco</button>
</p>

<h2>Movies:</h2>

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Title</th>
        <th>Theatres</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <% movies.forEach(function(movie){ %>
    <tr>
        <td><h3><%= movie.title %>(<%= movie.releaseYear %>) </h3><% if (movie.genres) { %><br/>
            <p>
                <small><%= movie.genres.join(',') %></small>
            </p> <% } %>
            <% if (0 && movie.preferredImage) { %>
            <div><img src="http://developer.tmsimg.com/<%= movie.preferredImage.uri %>"/></div>
            <% } %>
        </td>
        <td>
            <%
            var lastTitle = '';
            movie.showtimes.forEach(function(st){ %>
            <% if (lastTitle!= st.theatre.name) { %>
            <h4><%= st.theatre.name %></h4>
            <% } %>
            <p><%= st.dateTime %></p>
            <%
            lastTitle = st.theatre.name;
            }) %>
        </td>
        <td><%= movie.shortDescription %></td>
    </tr>

    <% }) // end forEach movies
    %>
    </tbody>
</table>

```