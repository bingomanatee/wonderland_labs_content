This project was originally about getting movie data times and mashing it up with IMDB. We need another source out there for that data. 

The good news is [tmsapi.com](http://developer.tmsapi.com/io-docs) has this data. The bad news is it rate limits the data to 50 calls a day.

For this experiment we will respond by 

1. limiting the search zones to six metropolitan areas: (Bay Area, New York City, Los Angeles, Portland, Oregon, Seattle, Washington and Austin, TX). 
2. Getting 30 days of data and refreshing caches every 7 days

As before, we get an API key from the provider and store it in `passport_config.json`:

``` json
{
    "eventful_auth_key": "xxx",
    "tmsapi_auth_key": "yyy"
}
```

Since the API is specialized for movies, we don't need to worry about categories. Also the data is better normalized than the eventful data, so less work will be had there. I originally cached the data in files, but as Heroku doesn't allow local files to be written, I plugged in an install of redis and cached the movie data there:

#### tmsapi_model.js

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var request = require('request');
var crypto = require('crypto');
var _DEBUG = false;
var moment = require('moment');

var redis;
if (process.env.REDISTOGO_URL) {
    console.log('redis url: %s', process.env.REDISTOGO_URL);
    var rtg = require("url").parse(process.env.REDISTOGO_URL);
    redis = require("redis").createClient(rtg.port, rtg.hostname);

    redis.auth(rtg.auth.split(":")[1]);
} else {
    redis = require("redis").createClient();
}

/* ------------ CLOSURE --------------- */

var API = 'http://data.tmsapi.com/v1/movies/showings';
/*+
 'startDate=2013-10-12' +
 '&numDays=30&zip=94103' +
 '&radius=100' +
 '&units=mi' +
 '&api_key=dtcd4eyz79x78yk84yjp45en';*/

var _cache_files = null;
var DATE_FORMAT = 'YYYY-MM-DD';

function _now() {
    return new moment().format(DATE_FORMAT);
}

function _then(date) {
    if (_.isString(date) || _.isDate(date)) {
        return new moment(date, DATE_FORMAT);
    } else {
        // assume is moment
        return date;
    }
}

function _age(date_string) {
    var then = _then(date_string);

    return new moment().diff(then, 'days');
}

/* -------------- EXPORT --------------- */

module.exports = function (apiary, cb) {

    /**
     * saves the data INSTANTLY to the file system.
     *
     * @param zip {number}
     * @param cb {function}
     * @private
     */

    function _poll_api(zip, cb) {
        console.log('POLLING API......... %s', zip);
        request.get(_params(zip), function (err, req, body) {
            if (err) {
                cb(err);
            } else {
                try {
                    var data = JSON.parse(body);
                    var str_data = JSON.stringify(_current_data(data));
                    console.log('saving %s data ...', zip, str_data.substr(0, 100));
                    redis.set(zip + '', str_data, function (result) {
                        console.log('result: %s', result.substr(0, 100));
                        cb(null, data);
                    });
                } catch (err) {
                    cb(err);
                }
            }
        });
    }

    function _params(zip) {
        return {
            url: API,
            qs: {
                startDate: _now(),
                api_key: apiary.get_config('tmsapi_auth_key'),
                radius: 100,
                units: 'mi',
                numDays: 30,
                zip: zip
            }
        };
    }

    function _get_movies(zip, cb) {
        zip = parseInt(zip);
        redis.get(zip + '', function (err, value) {
            if (value) {
                console.log('getting zip %s: %s', zip, value.substr(0, 50));
                cb(null, JSON.parse(value).data);
            } else if (err) {
                console.log('error: %s', err);
                cb(err);
            } else {
                model.poll_api(zip, cb);
            }
        })
    }

    function _current_data(data) {
        return {
            startDate: _now(),
            data: data
        };
    }

    var model = {
        name: 'tmsapi',
        search: _get_movies,
        age: _age,
        then: _then,
        poll_api: _poll_api,
        get_movies: _get_movies,
        current_data: _current_data
    };

    cb(null, model);
}

```

this model caches string versions of the JSON provided by tmsapi, with the addition of a timestamp, and re-polls any files over 7 days old. The poll requests movie data out to 30 days in advance, and for 100 miles around the city center. 

## Formatting the view for the new API data

The new API data lists movie data in a simple table:

``` html
<h1>Find Movies:</h1>

<p>
    <button class="btn" onClick="document.location='/movies/sanfrancisco'">San Francisco</button>
</p>

<h2>Movies:</h2>

<table class="table table-bordered">
    <thead>
    <tr>
        <th>Title</th>
        <th>Theatres</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <% movies.forEach(function(movie){ %>
    <tr>
        <td><h3><%= movie.title %>(<%= movie.releaseYear %>) </h3><% if (movie.genres) { %><br/>
            <p>
                <small><%= movie.genres.join(',') %></small>
            </p> <% } %>
            <% if (0 && movie.preferredImage) { %>
            <div><img src="http://developer.tmsimg.com/<%= movie.preferredImage.uri %>"/></div>
            <% } %>
        </td>
        <td>
            <%
            var lastTitle = '';
            movie.showtimes.forEach(function(st){ %>
            <% if (lastTitle!= st.theatre.name) { %>
            <h4><%= st.theatre.name %></h4>
            <% } %>
            <p><%= st.dateTime %></p>
            <%
            lastTitle = st.theatre.name;
            }) %>
        </td>
        <td><%= movie.shortDescription %></td>
    </tr>

    <% }) // end forEach movies
    %>
    </tbody>
</table>

```

![slate_movies.png](/blog_image/slate_movies.png)

# After a lot of work.....

The times take up a lot of vertical space so large number of movies' times are hidden behind a dropdown/button combo. Also, with our generous time polling, a lot of movies that aren't playing right now still show in the listing. The times need to be boiled down to those within 24 hours of the present time. 

Also there is two versions of the description: short and long, and they aren't always fully populated. They end up behind another toggle. 

Lastly, an initial index to autoscroll down to a movies is easier than spending a lot of effort scrolling through a long list of movies if you are looking for a particular film. 

#### movie_view.html

The view evolves to this: 

``` ejs
<h1>Find Movies:</h1>

<nav class="navbar navbar-default cities" role="navigation">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header"><a class="navbar-brand" href="#">Cities: </a></div>

    <button class="btn navbar-btn <%= location == 'sanfrancisco' ? ' active' : '' %>"
            onClick="document.location='/movies/sanfrancisco'">San Francisco, CA
    </button>
    <button class="btn navbar-btn <%= location == 'portlandor' ? ' active' : '' %>"
            onClick="document.location='/movies/portlandor'">Portland, OR
    </button>
    <button class="btn navbar-btn <%= location == 'nyc' ? ' active' : '' %>"
            onClick="document.location='/movies/nyc'">New York, NY
    </button>
</nav>

<p><%= slogan %></p>
<div class="row-fluid">
    <h2>Movies</h2>
    <ul class="movie-list">
        <% movies.forEach(function(movie){ %>
        <li onClick="show_movie('<%= movie.tmsId %>')"><%= movie.title %></li>
        <% }) %>
    </ul>
</div>

<% movies.forEach(function(movie){ %>
<div class="row-fluid movie" id="movie-<%= movie.tmsId %>">
    <div class="span4 movie-title"><h3><%= movie.title %><% if (movie.releaseYear) { %> (<%= movie.releaseYear %>)<% }
        %></h3><% if
        (movie.genres) { %>

        <p>
            <small><%= movie.genres.join(',') %></small>
        </p>
        <% } %>
        <% if (0 && movie.preferredImage) { %>
        <div><img src="http://developer.tmsimg.com/<%= movie.preferredImage.uri %>"/></div>
        <% } %>
    </div>
    <div class="span5">
        <article class="short-description">
            <%= _.compact([movie.shortDescription , movie.longDescription, '-- none --'])[0] %>
            <a href="#movie-<%= movie.tmsId %>" onClick="show_movie('<%= movie.tmsId %>', true)">... more</a>
        </article>
        <article class="long-description" style="display: none">
            <%= _.compact([movie.longDescription, movie.shortDescription, ' -- none -- '])[0] %>
        </article>
    </div>
    <div class="span3">
        <% if (movie.showtimes.length > 5) { %>
        <button class="btn" onClick="$('#accordion-<%= movie.tmsId %>').show(); $(this).hide()"><%=
            movie.showtimes.length %> showtimes
        </button>
        <% } %>

        <div class="panel-group"
        <% if (movie.showtimes.length > 5){ %> style="display: none" <% } %> id="accordion-<%= movie.tmsId %>">
        <div class="panel panel-default">
            <%
            var open_set = false
            _.each(movie.showtimes, function(st, i){
            %>
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a class="accordion-toggle"
                       data-toggle="collapse"
                       href="#accordion-<%= movie.tmsId%>-<%= st.theatre.id %>">
                        <%= st.theatre.name %></a>
                </h4>
            </div>
            <div id="accordion-<%= movie.tmsId%>-<%= st.theatre.id %>"
                 class="panel-collapse collapse <%= i || movie.showtimes.length > 3 ? ' in ' : ' ' %>">
                <div class="panel-body">
                    <%- st.times.map(function(t){
                    return t.format('MM DD &gt;&gt; hh:mm a');
                    }).join('<br/>') %>
                </div>
            </div>
            <!-- collapse -->
            <% }) // _.each(schedule(movie.showtimes)...
            %>
        </div>
        <!-- panel -->
    </div>
    <!-- panel-group -->
</div>
</div>

<% }) // end forEach movies
%>
<script language="javascript">
    $(function () {
        $(".collapse").collapse();
    });


    function show_movie(id) {
        location.href = ('#movie-' + id);
        var j = $('#movie-' + id);
        j.find('.short-description').hide();
        j.find('.long-description').show();
        j.css('background-color', '#FFE1C0');

        setTimeout(function () {
            j.animate({
                'backgroundColor': '#FFFFFF'
            }, 4000);
        }, 500);
    }
</script>

```

![nyc_movie_list_3.png](/blog_image/nyc_movie_list_3.png)

#### movie_action.js

The action needs to be tweaked to accept both the neutral and active state. Allowances for three cities -- New York, NY, San Francisco, CA and Portland, OR are made, with a navbar to toggle between them (see above). Some post-processing of time is done in the action.

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var moment = require('moment');

/* ------------ CLOSURE --------------- */

LOCATIONS = {
    sanfrancisco: 94103,
    portlandor: 97204,
    nyc: 10001
};

SLOGANS = {
    sanfrancisco: [
        'Young man, there\'s a place you can go...',
        'They say at night, you can hear George Lucas\' groans near the sewer grates',
        'The naked joggers are never the ones you want to jog naked...'
    ],

    portlandor: [
        'Where young people go to retire',
        'Featuring adult size rail',
        'Gleefully anticipating global warming'
    ],

    nyc: [
        'We got your movies right here',
        'Neither rain nor sleet nor snow',
        'Try our Chicago Style pizza'
    ],
    none: [
        'Click a button to see movie listings. Or just sit there and stare at the screen. Whatever you feel like.',
        'Every hour you spend at the movies is another hour you don\'t spend deciding on whether or not you need another cat',
        'Ad free... for now.'
    ]
}

function _schedule(showtimes, day) {
    var theatres = {};

    showtimes.forEach(function (showtime) {
        if (!theatres[showtime.theatre.id]) {
            theatres[showtime.theatre.id] = {theatre: showtime.theatre, times: []}

        }
        theatres[showtime.theatre.id].times.push(new moment(showtime.dateTime));
    });

    if (!day) day = new moment();

    _.each(theatres, function (t) {
        t.times = _.reject(t.times, function (time) {
            return time.diff(day, 'days');
        })
    });


    return _.filter(_.values(theatres), function (t) {
        return t.times.length
    });

}

/* -------------- EXPORT --------------- */

module.exports = {

    on_validate: function (context, done) {
        done();
    },

    on_input: function (context, done) {
        context.$out.set('movies', {});
        if (context.location) {
            var zip = LOCATIONS[context.location];

            if (zip){
                this.model('tmsapi').search(zip, function (err, data) {
                    context.movies = data;
                    done();
                });
            } else {
                done();
            }
        } else {
            context.location = 'none';
            done();
        }
    },

    on_process: function (context, done) {
        if (SLOGANS[context.location]){
            context.$out.set('slogan', _.first(_.shuffle(SLOGANS[context.location])));
        } else {
            context.$out.set('slogan', _.first(_.shuffle(SLOGANS.none)));
        }
        done();
    },

    on_output: function (context, done) {
        if (!context.movies){
            context.movies = [];
        }

        context.$out.set('movies', context.movies.reduce(function (out, movie) {
            var theatres = _schedule(movie.showtimes);

            if (theatres.length) {
                movie.showtimes = theatres;
                out.push(movie);
            }
            return out;
        }, []));
        context.$out.set('schedule', _schedule);
        context.$out.set('location', context.location);
        done();
    }
}

```

The net result is functional, but sluggish. It produces 1.2 MB of markup. Some more significant condensation of the dataset is necessary. 

Now that we have redis as a backend, we can store individual data records in the key-value system and a more dynamic application should speed up the presentation of the data some.

<button class="btn btn-primary btn-large" onClick="document.location='/ps5_a_new_angle">A New Angle</button>