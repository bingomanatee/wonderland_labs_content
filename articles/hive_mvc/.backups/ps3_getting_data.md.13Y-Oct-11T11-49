Hive-MVC excels at allowing expanding resources to be put into granular files to reduce tactical code bloat. 

As we write code to concatenate all pages of an event listing, it becomes clear that we need to insulate this process from the action file. 

In `/frames/events/resources/models/eventify_model.js` we insert the following:

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var request = require('request');
var _DEBUG = false;

/* ------------ CLOSURE --------------- */

var EVENTFUL_SEARCH_URL = 'http://api.eventful.com/json/events/search';
var ITEMS_PER_PAGE = 50;

/* ------------ CLOSURE --------------- */

/** ********************
 * Purpose: to proxy data from eventful
 * @return void
 */

/* -------------- EXPORT --------------- */


module.exports = function (apiary, cb) {

    function _get_results(context, done) {

        events = null;

        function _add_to_events(err, res, body) {
            if (err) return done(err);

            try {
                var new_data = JSON.parse(body);
            } catch (err) {
                return done(err);
            }
            if (new_data.events && new_data.events.event && new_data.events.event.length) {
                if (events) {
                    events.events.event = events.events.event.concat(new_data.events.event);
                } else {
                    events = new_data;
                }
            }

            if (new_data.page_number < (new_data.page_count - 1)) {
                _poll(new_data.page_number + 1);
            } else {
                // the exit condition

                context.$out.set('events', events);
                done();
            }

        }

        function _poll(page) {
            var params = {
                url: EVENTFUL_SEARCH_URL,
                qs: {
                    app_key: apiary.get_config('eventful_auth_key'),
                    location: context.location, keywords: context.search,
                    page_size: ITEMS_PER_PAGE
                }
            };

            if (context.radius) {
                context.radius = parseInt(context.radius);
                if (context.radius > 0) {
                    params.qs.search_radius = context.radius;
                }
            }

            if (page) {
                params.qs.page_number = page;
            }

            console.log('polling events: %s', JSON.stringify(params));
            request.get(params, _add_to_events);
        }

        _poll();
    }

    cb(null, {
        name: 'eventful',
        search: _get_results
    })
}

```

Note we are doing a few things here that are new:

1. Expanding the number of requests per call to 50
2. calling the API multiple times, once per page
3. Adding the method that does so to a naked object that is accessible by the `model` method of the apiary or any action

Now, we aren't limiting the ability to search eventful to only a single action. Our streamlined search action now reads:

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');

/* -------------- EXPORT --------------- */

module.exports = {


    on_get_validate: function (context, done) {
        done();
    },

    on_get_input: function (context, done) {
        done()
    },

    on_get_process: function (context, done) {
        done();
    },

    on_get_output: function (context, done) {
        context.$out.set('events', '')
        done();
    },

    /* -------------- POST ------------- */

    on_post_validate: function (context, done) {
        if (!context.search) {
            // missing search term; we will use very brutal error handling here. No further processing will happen.
            done('no search term found');
        } else if (!context.location) {
            done('no location found')
        } else {
            done();
        }
    },

    on_post_input: function (context, done) {
        this.model('eventful').search(context, done);
    },

    on_post_process: function (context, done) {
        done();
    },

    on_post_output: function (context, done) {
        done();
    }
}

```

We reduce the page display to list the count based on actual polling of the event array:

``` ejs

<% if (events) { %>
<h2><%= events.events.event.length %> Results: </h2>
```

However all this extra data just emphasizes how much repetition exists in the dataset. This also means slower pages and poor readability; we are kind of honor bound to turn this into an HABTM related set of data nodes, and to use some client side frameworks to help dial down the noise.