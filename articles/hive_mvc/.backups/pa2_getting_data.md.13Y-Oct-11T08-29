In ?[a previous article](passive_aggressive) we setup a basic Hive-MVC site, and hosted it on Heroku. 

Up to now our site is basically a static frame; other than the layout wrapper there's little need to use node (or any backend system) at all because our site is not data driven. 

We will change that here by giving our site a reason to live: to get data on vents by blending [eventful's API](http://api.eventful.com/) and IMDB in interesting and novel ways.

## Getting Eventful

At the decided risk of creating namespace nausea, we will be using Eventful's free API for event listings. Eventful's listings, unlike some other butheaded commercial offerings, doesn't even require a login for basic data retrieval. All you need is an authentication key. 

Having signed up as an app and gotten our API key with a few minutes of clicking and documentation reading, we will associate it to our application. 

### Creating a config file

One of Node's best kept features is that the `require` command can interpret JSON directly into your context. So we will put our API key into a configuration file at root 

``` json
{
    "eventful_auth_key": "xxxx"
}
```

and read it in as a configuration file in our `web.js` code:

``` javascript
// ...

server.listen(app.get('port'), function () {
    var apiary = mvc.Apiary({log_file: log_file, action_handler_failsafe_time: 3000}, __dirname + '/frames');
    apiary._config.setAll(require('./site_identity.json'));
    apiary._config.setAll(require('./passport_config.json'));
// ...
```

this will make the eventful auth key available as a config property of the apiary: 

``` javascript
console.log('site eventful key: %s:', apiary.get_config('eventful_auth_key'));
// site eventful key: xxxx
```

## Proxying Eventful

we will add the [`request` module by mikeal](https://github.com/mikeal/request) to our package.json file via `npm add request --save` and use it to get data from eventful. 

The first and most brutal pass will create an action that both displays a search form and has a POST hook to proxy eventful responses and turn them out as JSON. 

We will create an entirely self contained frame for events: 

* `/frames/events/hives/main/actions/search/search_action.js` will be our node proxying script. 
* `/frames/events/hives/main/actions/search/search_config.json` will have our routing, as before. 
* `/frames/events/hives/main/actions/search/search_view.html` will have our search form.

#### search_config.json

Unlike our single-method get-based homepage, we will have two responses with this page: a *get* response that returns a form, and a *post* response that responds to the form and returns the results. 

``` json

{
    "layout_name": "bootstrap",
    "routes": {
        "get": "/search",
        "post": "/search"
    }
}
```

As before we are reusing the bootstrap layout for expediency. 

The template will be a very simple form:

``` html
<form class="form-horizontal" id="event-search-form" method="POST" action="/search">
    <div class="control-group">
        <label class="control-label" for="search-input">Search Term</label>
        <div class="controls">
            <input type="text" name="search" id="search-input" placeholder="Search for events">
        </div>
    </div>
    <div class="control-group">
        <div class="controls">
            <button type="submit" class="btn">Search for Events</button>
        </div>
    </div>
</form>
```
note that the form's action posts straight back to this page -- and spits out API marku verbatim. 

### The action script

This backend script operates in two modes: *get* (in which it adds no functionality whatsoever) and *post* which vomits API data straight at the browser. 

``` javascript
var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var request = require('request');
var _DEBUG = true;

/* ------------ CLOSURE --------------- */

function _url(context) {
    // using the eventful auth key stored in the bootstrapping web.js file. 
    return 'http://api.eventful.com/rest/events/search?location=San+Francisco&app_key=' + context.$apiary.get_config('eventful_auth_key');
}
/* -------------- EXPORT --------------- */

module.exports = {


    on_get_validate: function (context, done) {
        done();
    },

    on_get_input: function (context, done) {
        done()
    },

    on_get_process: function (context, done) {
        done();
    },

    on_get_output: function (context, done) {
        done();
    },

    /* -------------- POST ------------- */

    on_post_validate: function (context, done) {
        if (!context.search) {
            // missing search term; we will use very brutal error handling here. No further processing will happen. 
            done('no search term found');
        } else {
            done();
        }
    },

    on_post_input: function (context, done) {
        request.get(_url(context),
            function (err, response, body) {
                if (err) {
                    done(err);
                } else {
                    context.$send(body, done);
                }
            })
    },

    on_post_process: function (context, done) {
        done();
    },

    on_post_output: function (context, done) {
        done();
    }
}
```