Planets combine a Three.js icosahedron and metadata for each point. 

### Constructor

#### Planet(depth) 

creates a planet tessellated to the number of iterations passed in as the constructor
They have the following properties: 

#### iso [Three.js icosahedron]

#### vertices(index: boolean) [{Three.js Vector3}]

a function that returns the vertices(Vector3); each vertex has an index property (int) and a uv (Vector2) sub-property. 
Note the vertices are normalized, regardless of the planet's desired radius. 

if index == true, returns an array of ints `[0..(#vertices - 1)]`. 

#### vertex(index: int) 
returns a single vertex. 

### Data related functions
Vertex data is stored in a separate data collection than the iso. There are many methods for getting/setting vertex data:

#### vertex_data(index, key, [value?])
if two arguments are passed in, returns the value of vertex data stored for a given vertex. If three arguments are passed in, sets the value for a given key and index. 

``` javascript

var planet = new Planet(0); // will have 12 points

planet.vertex_data(0, 'elevation', 500);
var ele_0 = planet.vertex_data(0, 'eleation') // == 500.

```

#### Planet.vertex_data_all(key, value)

Assigns the same value to each vertex for a given key. Warning: do not pass in objects or arrays because each vertex will have the same literal object.