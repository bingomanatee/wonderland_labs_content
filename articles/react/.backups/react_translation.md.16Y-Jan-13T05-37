I am working on a Reat personal project and it became clear to me that I wanted it to have internationalization that is (once the system was designed) intuitive and relatively pain-free. This meant, for instance:

1. For the base language, I did not want it to incur extra requests for language data; I wanted the base language to be bundled with source and retrievable without a request/response cycle. 
2. As the system evolved I realized I wanted larger blocks of text to be converted to markdown; this meant being able to pick out the text nodes for translation. 
3. I wanted to automate the translation using an API for language as I am sadly monolingual. 
4. I wanted the text data to be embedded with the consuming components and checked into git, just like the class files and the css. 
5. I wanted the locale to be a model that when changed, triggered universal reloading of all the sites' content.

## Large Blocks and Small Labels

The difference between small pieces of text and large tracts of styled blocks meant that this system would have two sytstems of storage: 

* json blocks of name-value maps that did not include any style; where style is needed it would be part of the containing template. An entire components' language dictionary would likely be fairly terse, so digesting all of a components' terms at once seemed reasonable. (at least for one language -- given that there could be hundreds of languages, in all cases the dictionaries would be loaded one locale at a time.)
* markdown files; these would be zero to many files of large blocks of text; these would be loaded on-demand and always through HTTP as preloading large blocks of markdown and embedding them in a webpacked project seemed like it would make bloaty files. 

## The brokers

The terms and markdowns would be cached in nested Maps. This allows certain terms/languages to be pre-loaded to reduce the need for accessing the language API. 

The terms and markdown would be stored in nested Maps (the ES6 dictionary class). The top of the tree would be components; the component map would contain maps indexed by language. These maps in turn include file-block maps (for markdown) or term-text maps (for strings). 

``` javascript

/**
 * a nested three-depth map storing strings by comp(onent), then locale, then key(name).
 * @type {Map}
 */
let compMap = new Map();

const reset = () => {
    compMap = new Map();
}

const getComponent = (comp) => {
    if (compMap.has(comp)) {
        return compMap.get(comp);
    }
    let langSet = new Map();
    compMap.set(comp, langSet);
    return langSet;
};

const copyValues = (valueMap, values) => {
    for (let key in values) {
        if (values.hasOwnProperty(key)) {
            valueMap.set(key, values[key]);
        }
    }
};

const setStrings = (comp, lang, values) => {
    console.log('setting strings: ', comp, lang, values);
    if (canUseDOM && !lang) {
        eval('debugger;"no lang"');
    }
    let clMap = getComponent(comp);
    let langMap = clMap.has(lang) ? clMap.get(lang) : new Map();
    copyValues(langMap, values);
    clMap.set(lang, langMap);
};

const mapToObj = map => {
    let out = {};
    map.forEach((value, key) => {
        out[key] = value;
    });
    return out;
};

const getStrings = (comp, locale) => new Promise((resolve, reject) => {
    try {
        if (compMap.has(comp) && compMap.get(comp).has(locale)) {
            let values = compMap.get(comp).get(locale);

            return resolve(mapToObj(values));
        }
    } catch (err) {
        console.log('error: ', err);
    }

    console.log('getting strings from API:', comp, locale);

    http.get('/api/strings/' + locale).then((data) => {
        var compValues = null;
        for (let dataComp in data) {
            if (!data.hasOwnProperty(dataComp)) {
                continue;
            }
            let values = data[dataComp];
            setStrings(dataComp, locale, values);
            if (dataComp === comp) {
                compValues = values;
            }
        }
        if (compValues) {
            console.log('compValues: ', compValues);
            resolve(compValues);
        } else {
            reject(new Error('none found'));
        }
    }, reject);
});

export {getStrings, setStrings, reset};

```