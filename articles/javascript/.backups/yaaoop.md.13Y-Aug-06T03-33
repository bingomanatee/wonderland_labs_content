I always found "Prototypical" to be a very complex and overly glorified way of describing what Javascript does with the class model. I thought I would give a stab at breaking down the basics of how and why Javascript does instantiation the way it does. 

## The Conceptual Tree

The logical leaps this article covers are, in short form:

* Javascript objects are hashes
* These hashes can contain values, other objects, arrays, or functions. 
* A hash function acts like an instance method, in that `this` refers to the hash itself.
* Any JavaScript function when called with the `new fn()` form, returns an instance object.
* it will have the function's prototype, which is a hash that contains defaults for the retuned object.
* A functions' prototype behaves like a normal hash -- it can be defined, modified, and changed by name. 

## Some fundamental but very important concepts

### The three types of things in JavaScript

There are three types of things in JavaScript: 

* __Scalars:__ numbers and strings. Scalars are simple values, often called primitives in other languages
* __Functions__
* __Objects:__ name-value hashes. include *Arrays*, *Dates*, and *Instances*.

### Objects are Hashes. 

Seems simple enough but getting this is vital to getting anything real done with Javascript. A hash is a set of name-value pairs -- basically a labelled keychain. In a deeper sense it is also a __namespace__ -- that is, for the object variable, each *value* is called *name*. 

<iframe width="100%" height="400" src="http://jsfiddle.net/bingomanatee/6qGfh/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<div style="display: none">
var fred = {
    wife: 'Wilma',
    kids: 1,
    male: true,
    says: ['hey boo boo', 'yabba dabba doo']
};
console.log('Freds is male: ', fred.male, ' and his wife is ', fred.wife); // true, wilma

var barney = {
    wife: 'Betty',
    kids: 1,
    male: true,
    says: []
};

console.log('Barney is male:',
barney.male,
    'and his wife is ',
barney.wife); // true, betty

// lets give Barney a sex change
barney.male = false;
console.log('Barney is male:', barney.male, 'and his very upset wife is ', barney.wife); // false, betty
</div>

An object can be created with any number of properties, and you can add or delete properties at any time to any object. 

``` javascript
barney.hat = 'Fuzzy Blue Cap';
delete fred.wife;
```

The javascript's engine's task of finding the value of an object by key is pretty readable here. You have set these values in creation, and as shown for poor Barney, you can change them by setting the dot-reference.

## Self-awareness in object code

Since objects can be passed around to different variables, put in arrays, etc., and object variables can be cleared out, the variable names are not permanently assigned to an object. For instance, 

<iframe width="100%" height="300" src="http://jsfiddle.net/bingomanatee/Wrffv/embedded/js,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<div style="display: none">
var cup_1 = {has_ball: true};
var cup_2 = {has_ball: false};
var cup_3 = {has_ball: false};

console.log('has ball: cup_1: ', cup_1.has_ball, ',cup 2:', cup_2.has_ball, ',cup 3', cup_3.has_ball); // has ball: cup_1:  true ,cup 2: false ,cup 3 false 

var swapper = cup_1;
cup_1 = cup_2;
cup_2 = cup_3;
cup_3 = swapper;

console.log('has ball: cup_1: ', cup_1.has_ball, ',cup 2:', cup_2.has_ball, ',cup 3', cup_3.has_ball); // has ball: cup_1:  false ,cup 2: false ,cup 3 true 

cup_1.owner = 'cup_1';
cup_2.owner = 'cup_2';
cup_3.owner = 'cup_3';

swapper = cup_1;
cup_1 = cup_2;
cup_2 = cup_3;
cup_3 = swapper;

console.log('owner: cup_1: ', cup_1.owner, ',cup 2:', cup_2.owner, ',cup 3', cup_3.owner); // owner: cup_1:  cup_2 ,cup 2: cup_3 ,cup 3 cup_1 
</div>

As shown here, you can switch which variable refers to which object at will. The objects -- which have been re-mapped here -- will retain their assigned values. 

However, if a function has been tacked onto an object, then it will always be able to refer to the host object it is assigned to using the keyword `this`. This simple handy utility is how OOP-like behavior - and a host of nasty side effects -- is accomplished. and THIS is why objects can be considered "Namespaces" of sorts.&apos;

<iframe width="100%" height="300" src="http://jsfiddle.net/bingomanatee/ugu6E/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

This means that __fundamentally, you get "instance-like" behavior on any object in JavaScript without using the `new MyClass()` pattern.__ That is -- you can create a "pure object", assign properties and methods to it by name, and that object will ACT like a "Class instance."

In practice, JavaScript "Constructors" and "Instances" are not distinct syntactic structures -- they are behaviors produced by using the `new` call on functions. 

### The Prototype: default values for an instance

The class-like behavior Javascript provides is a very simple concept that is often wrapped in very big language. 

A prototype is simply a collection of "Default values" for an instance object if the instance object hasn't been assigned a unique value for given name. So if you find yourself getting dizzy with prototypical terminology, just remember that "Prototype" means "Default values". More deeply, a prototype is a hash of name/default values for all **instances** of a function.

<iframe width="100%" height="300" src="http://jsfiddle.net/bingomanatee/Hv96R/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

There are a lot of behaviors and implications of instances in JavaScript that are not expected by someone coming from a classical context: 

*  An instance can have __any number of properties__ -- which can be values, objects, functions, or whatever. an instance's manifest is not limited by its prototype/definition. 
*  You can __add functions or properties to an instance__. You can completely override a function of an instance with another function. You could even assign a scalar over a function; there is no protection/insulation for the prototype-defined values. 
*  __There are no "private" properties on an instance__. "Privacy" is achieved by closure. 
*  __There is no deep inheritance__. An object can only have a single parent.&apos;&apos;
*  You can if you want modify a prototype and __magically alter the default values of its instances *after they have been created*__. this is a very "Time Traveller/Matrix like" thing -- you can change the reality for untold number of instances by rewriting their default values AT ANY TIME. 

The prototype of an object is itself a hash. You can do anything to it that you can do to an object. You can even completely re-associate a prototype with a new object. This is my preferred way of defining prototypes.  

<iframe width="100%" height="300" src="http://jsfiddle.net/bingomanatee/vwknm/embedded/js,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

## In closing

Javascript purists insist that JavaScript is "Not a classical language". While it is true that you will not find a discrete structure for defining a thing called a class, at this point. What Javascript has to provide class behavior is the ability to define a default set of values for the output of a function, when called with the `new` construct. 

[Douglas Crockford's "Javascript: the Good Parts"](http://eleventyone.done.hu/OReilly.JavaScript.The.Good.Parts.May.2008.pdf) goes into the implications and best practices around functions, objects and instnaces. in depth. 

## Some "Power user" tricks

### String key association

You have a larger set of tokens available when naming object keys than is apparent by reading the docs (casually.) 

* You can assign ANY name you can make a string out of a value, by using array syntax:

``` javascript

var barney = {};
barney['favorite outfit'] = 'Ballerina costume';
console.log('barney likes to wear a ', barney['favorite outfit']); // Ballerina costume
```

You can even assign numeric key-value association. The map will be to a string of a number, but with array access, that shouldn't be a problem.

``` javascript

var bedrock_citizens = {};

bedrock_citizen[0] = 'Fred';
bedrock_citizen[1] = 'Barney';
bedrock_citizen[2] = 'Wilma';
bedrock_citizen[3] = 'Betty';

console.log('bedrock citizens: ' bedrock_citizen[0], bedrock_citizen['1'] ... ) // 'Fred', 'Barney'...
```

This does NOT endow an object with the features of an Array but in some circumstances, it might be more useful.

### Binding context 

You can create the __effect__ of binding a function to an object using the `fn.call(context, a, b, c)` or `fn.apply(context, [a, b, c])` methods of the __function itself__. This will set `this = context` within the execution of the function. 

### by value/by reference and prototypes

A common problem in programming is, when I pass a value to a property, or as a functional parameter, and change that value in the second context, does it modify the value in the first context? 

When you pass "Scalars" - numbers and strings -- and modify them, the original value is NOT modified. Arrays and objects on the other hand are passed by reference. If you modify an object attached to one variable, as shown in the shuffle example, it is modified for each variable that refers to it.  &apos;&apos;&apos;

What this means for prototypes, is that while you can define scalar and functional values to prototypes, you should not in general assign arrays and objects to prototypes, because these will have "Static" behavior. that is, if you change a prototype's array in one instance, it will be changed in ALL instances. 

Sometimes this is the desired effect -- but if it isn't, you have to assign new objects and arrays inside the constructor function. 

<iframe width="100%" height="300" src="http://jsfiddle.net/bingomanatee/AAMaF/embedded/js,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<div style="display: none">
function BlackjackHand() {}
BlackjackHand.prototype.count = function () {
    var value = 0;
    var aces = 0;
    for (var i = 0; i < this.cards.length; ++i) {
        var card = this.cards[i];
        switch (card) {
            case 'A':
                value += 11;
                ++aces;
                break;

            case 'K':
                value += 10;
                break;

            case 'Q':
                value += 10;
                break;

            case 'J':
                value += 10;
                break;

            default:
                value += Number(card);
        } // end switch
         console.log('card: ', card, 'value: ', value);
    } // end for

    while (aces && value > 21) {
        // use the low value of ace when we are over. 
        --aces;
        value -= 10;
         console.log('after reucing ace, value: ', value);
    }
    return value;
}

BlackjackHand.prototype.cards = []; // and here is where things get wierd.

var dealer_hand = new BlackjackHand();
dealer_hand.cards.push('K', 'A');

var my_hand = new BlackjackHand();
my_hand.cards.push(10, 7);

console.log('dealer cards:', dealer_hand.cards.join(','), 'value: ', my_hand.count());
console.log('my cards:', my_hand.cards.join(','), 'value: ', my_hand.count());
//  my cards: K,A,10,7  ??? WTF!!!

console.log('------- fixing the model --------');
function GoodBlackjackHand() {
    this.cards = [];
}
GoodBlackjackHand.prototype.count = BlackjackHand.prototype.count;
// you can take functions from one prototype and assign them to another prototype; 
//since prototypes are just hashes, you can pass their values around if you want. 

var dealer_hand = new GoodBlackjackHand();
dealer_hand.cards.push('K', 'A');

var my_hand = new GoodBlackjackHand();
my_hand.cards.push(10, 7);

console.log('dealer cards(GoodBlackjackHand):', dealer_hand.cards.join(','), 'value: ', dealer_hand.count());
// dealer cards: K,A,10,7 value:  28 ??
console.log('my cards(GoodBlackjackHand):', my_hand.cards.join(','), 'value: ', my_hand.count());
// my cards: K,A,10,7 value:  28  ??? WTF!!!
</div>

### Arrays are objects too

Arrays look different in practice because instead of "dot notation" their values are got and put using braces: 

``` javascript

var a = new Array(); 
var b = []; 
// both of these produce the same effect.

a.push(3);
b[0] = 3;
// again, two ways of doing the same thing.

```

the `typeof` operator doesn't distinguish between basic objects and arrays; if you want to test for this, you can use the `Array.isArray(subject)` method, which works on [most/newer browsers](http://kangax.github.io/es5-compat-table/#Array.isArray) or the [Underscore.js isArray function](http://underscorejs.org/#isArray);

### Strings are NOT objects -- even though they have methods! 

As "Impure" as it may seem, strings are primitives/scalars. They have a horde of useful methods, but while they LOOK like instance methods, they are in reality functions that produce a new string based on the original string's values. 

### Working with Node.js' `util.extends` and Classes

`util.extends` copies one class' prototype into another class. This will wipe out any previous prototype modifications but allows you to continue to modify the target class' prototype. 

Here is a unit tests to show extends in action:

``` javascript

var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var tap = require('tap');

/* -----------------------------------

shows how class extension works in node

 */

function MyMath(value) {
    this.value = value;
}

_.extend(MyMath.prototype, {

    add: function(value){
        this.value += value; return this;
    },

    multiply: function(value) {
        this.value *= value; return this;
    },

    toString: function(){
        return this.value;
    }

});


tap.test('class', {timeout: 1000 * 10, skip: false }, function (suite) {

    suite.test('extension', {timeout: 1000 * 10, skip: false }, function (test) {

        function MyClass(value){
            this.value = value;
        }

        _.extend(MyClass.prototype, {
           add: function (value){
               this.value = this.value + '' + value;
               return this;
           }
        });

        var n = new MyClass(3);
        var addBeforeExtension = n.add(6).value;

        test.equal(addBeforeExtension, '36', 'string addition is the basic functionality of MyClass is ' + addBeforeExtension);

        var n2 = new MyClass(10);

        util.inherits(MyClass, MyMath);

        var addedAfterExtnesion = n2.add(5).value;

        test.equal(addedAfterExtnesion, '105', 'numeric addition of an instance after extension is still string addition ' + addedAfterExtnesion);

        var n3 = new MyClass(20);

        var addedAfterExensionOnNewClass = n3.add(3).value;

        test.equal(addedAfterExensionOnNewClass, 23, 'numeric addition of a new instance will use numeric extension ' + addedAfterExtnesion);

        test.end();
    });


    suite.test('pre and post modification', {timeout: 1000 * 10, skip: false }, function (test) {

        var MyPowClass =  function(value){
            this.value = value;
        }

        _.extend(MyPowClass.prototype, {
            add: function (value){
                this.value = this.value + '' + value;
                return this;
            }
        });

        MyPowClass.prototype.pow = function(pow){
            this.value = Math.pow(this.value, pow);
            return this;
        }

        var pow = new MyPowClass(4);

        var exponentedBeforeExtension = pow.pow(2).value;

        test.equal(exponentedBeforeExtension, 16, 'number raised to power before extension');

        util.inherits(MyPowClass, MyMath);

        var noPow = new MyPowClass(10);

        test.notOk( noPow.__proto__.hasOwnProperty('pow'), 'no longer has pow method');

        // reasserting pow

        MyPowClass.prototype.pow = function(pow){
            this.value = Math.pow(this.value, pow);
            return this;
        }

        test.ok( noPow.__proto__.hasOwnProperty('pow'), 'now has pow method');

        test.end();
    });

    suite.end();

});

```

The basic rule of thumb is nothing you do to your prototype before you use `util.inherits(target, model)` survives the extension process. But after you inherit, your prototype can be modified to customize the target further. 

------------------
&apos; Note that `this`, when called on an unbound function, or in a root script, refers to the "Global" space, In client side JS, this is the window object. In node, it is the "implied closure" of the module. 

&apos;&apos; You can "Mix in" as many sets of values after an object as been created, but this is no different than assigning values one by one.

&apos;&apos;&apos; Technically speaking you don't "Modify" scalar values. When you change a string or numerical value, you are actually creating a new value and writing that new value back to a variable. Strings and numbers are called "Scalars", and are immutable (unchangeable). Every operation you do to strings and numbers take one or more original scalar values, act on them, and produce a new scalar value.