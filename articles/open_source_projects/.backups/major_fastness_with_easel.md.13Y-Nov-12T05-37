I am doing a hex-based mapping system in Easel.js and by using the "secrets of Easel" I achieved major fastness. Here's how YOU can achieve MAJOR FASTNESS in three easy steps.

## Cache only

The first thing to understand about easel is that each shape or container has the option to cache itself. When cached, a shape/container stores a snapshot of the drawn shape, rather than redrawing, operation by operation, the graphic every time the stage is updated. 

To cache the shape you have to know the boundary of the shape's extent. Fortunately this will be in the local coordinate system. However because of this, you may risk saving more pixels than you need, if the shape is scaled down. I.e., if you have a 500x500 square that is scaled by 0.2, a 10,000 pixel cache is a waste. So you can pass a fourth parameter, scale, which will save a lower / higher res as necessary, cache of the shape. 

The full cycle looks something like this:

``` javascript
 var extent = Math.ceil(this.hex_size) + 1;
 shape.cache(-extent, -extent, 2 * extent, 2 * extent, scale);
 return shape;
```

## Commence the cheating

So, if you have a huge grid and want to update it cell by cell, you could cache every cell individually. This is "better than nothing" but creates a lot of identical canvas references. 

What you can do instead is create a few reference cells (one for each color, say) and use their caches as a source for bitmaps. This means each cell will simply reference a much smaller subset of bitmaps, and this puts a real shot in the arm for your render times. 

``` javascript

        _make_hex: function (color) {
            var shape = new createjs.Shape();
            shape.graphics.f(color);
            var points = this.calc_points();

            shape.graphics.mt(_.last(points).x, _.last(points).y);
            _.each(points, function (point) {
                shape.graphics.lt(point.x, point.y);

            });

            var extent = Math.ceil(this.hex_size ) + 1;

            shape.cache(-extent, -extent, 2 * extent, 2 * extent);
            CACHED_HEXES[color] = shape.cacheCanvas;
        },

        fill: function (container, color, shape, scale, cache) {

            if (!CACHED_HEXES[color]) {
                this._make_hex(color);
            }

            var refresh = !shape;
            if (refresh) shape = new createjs.Bitmap(CACHED_HEXES[color]);
            shape.x = this.center_x() - (this.hex_size );
            shape.y = this.center_y() - (this.hex_size);
         //   shape.scaleX = shape.scaleY = 1/scale;
            container.addChild(shape);

            var extent = Math.ceil(this.hex_size) + 1;
            return shape;
        },
```

note - in this particular instance I did NOT pass scale to `cache(...)` because I want the bitmap to be properly scaled for the scene; I'd rather have a few extra pixels than have to do a lot of math to bring things into proper orientation -- though this might change. 

Also, note that I am using the cache layer of the platonic hexes as source for a new bitmap reference. This is a very powerful tool for transforming canvases to reusable sprite sheets, stamps, etc. These canvases can even have stages of their own.

## The result

The drawing process is pretty damn fast, even with 6,000 hexes on the screen. It does get fairly sluggish at 16,000 hexes but thats partly because I'm redrawing the whole matrix with every click.